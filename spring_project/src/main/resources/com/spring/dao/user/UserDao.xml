<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.dao.user.UserDao">
	<!-- 태솔 추가 네이버 로그인 관련 -->
	<!-- 태솔 추가 네이버 로그인 관련 -->
	<select id="sns_getNaver_code" resultType="Integer" parameterType="String">
		SELECT naver_code FROM sns_info WHERE sns_id = #{sns_id}
	</select>
	
	<select id="user_getNaver_code" resultType="Integer" parameterType="int">
		select user_naver_code from user WHERE user_naver_code = #{user_naver_code}
	</select>
	
	<insert id="sns_infoInsert" parameterType="sns_infoDto">
	insert into sns_info(sns_id)
	values(#{sns_id})
	</insert>
	
	<insert id="user_insert_naver" parameterType="UserDto"> <!-- 회원가입 (네이버) -->
		INSERT INTO user
		(user_id,
		user_password, user_name, user_gender,
		user_birth_date,
		user_telephone_number, user_address, user_ip, user_com_code, user_naver_code)
		VALUES
		(#{user_id},
		#{user_password}, #{user_name}, #{user_gender},
		#{user_birth_date},
		#{user_telephone_number}, #{user_address},
		#{user_ip}, 1, #{user_naver_code})
	</insert>
	
	<select id="user_getID" resultType="String" parameterType="int">
		select user_id from user WHERE user_naver_code = #{user_naver_code}
	</select>
	
	<!-- 태솔 추가 네이버 로그인 관련 -->
	<!-- 태솔 추가 네이버 로그인 관련 -->
	
	<select id="user_login" resultType="UserDto"> <!-- 로그인 (일반) -->
		SELECT * FROM user WHERE user_id = #{user_id} AND user_password =
		#{user_password}
	</select>
	
	<select id="user_login_kakao" resultType="UserDto">
		SELECT * FROM user WHERE user_id = #{user_id}
	</select>
	<!-- id : 메소드명, resultType : return, parameterType : 파라미터 타입 -->
	<insert id="user_insert" parameterType="UserDto"> <!-- 회원가입 (유저) -->
		INSERT INTO user
		(user_id,
		user_password, user_name, user_gender,
		user_birth_date,
		user_telephone_number, user_address, user_ip)
		VALUES
		(#{user_id},
		#{user_password}, #{user_name}, #{user_gender},
		#{user_birth_date},
		#{user_telephone_number}, #{user_address},
		#{user_ip})
	</insert>
	
		<insert id="user_insert_kakao" parameterType="UserDto"> <!-- 회원가입 (카카오) -->
		INSERT INTO user
		(user_id,
		user_password, user_name, user_gender,
		user_birth_date,
		user_telephone_number, user_address, user_ip, user_com_code)
		VALUES
		(#{user_id},
		#{user_password}, #{user_name}, #{user_gender},
		#{user_birth_date},
		#{user_telephone_number}, #{user_address},
		#{user_ip}, 1)
	</insert>

	<insert id="user_bank_insert" parameterType="User_BankDto">  <!-- 회원가입 (유저) -->
		INSERT INTO
		user_bank (user_id, user_bank, user_account_number)
		VALUES
		(#{user_id},
		#{user_bank}, #{user_account_number})
	</insert>

	<select id="user_id_check_ajax" resultType="String"
		parameterType="String">  <!-- 아이디 중복 검사 (ajax) -->
		SELECT user_id FROM user WHERE user_id = #{user_id}
	</select>

	<select id="user_telephone_check_ajax" resultType="String"
		parameterType="String">  <!-- 휴대폰번호 중복 검사 (ajax) -->
		SELECT user_telephone_number FROM user WHERE user_telephone_number =
		#{user_telephone_number}
	</select>

	<select id="user_find_id"
		resultType="com.spring.dto.user.UserDto"> <!-- 아이디 찾기 -->
		SELECT * FROM user WHERE user_telephone_number =
		#{user_telephone_number}
	</select>

	<select id="user_find_password"
		resultType="com.spring.dto.user.UserDto"> <!-- 비밀번호 찾기 -->
		SELECT * FROM user WHERE user_telephone_number =
		#{user_telephone_number} AND user_id = #{user_id}
	</select>

	<select id="user_mydetail"
		resultType="com.spring.dto.user.UserDto"> <!-- 내 정보 조회 / 해당 정보 상세보기 -->
		SELECT * FROM user a LEFT JOIN user_bank b ON
		a.user_id = b.user_id
		LEFT
		JOIN user_role c ON a.user_role_code =
		c.user_role_code LEFT JOIN
		user_condition d ON a.user_condition_code =
		d.user_condition_code
		WHERE
		a.user_id = #{user_id}
	</select>

	<update id="user_change_password" parameterType="UserDto"> <!-- 개인 비밀번호 변경 -->
		UPDATE user SET user_password = #{user_password} WHERE user_id =
		#{user_id}
	</update>

	<update id="user_change_name" parameterType="UserDto"> <!-- 개인 이름 변경 -->
		UPDATE user SET user_name = #{user_name} WHERE user_id = #{user_id}
	</update>

	<update id="user_change_telephone" parameterType="UserDto"> <!-- 개인 휴대폰번호 변경 -->
		UPDATE user SET user_telephone_number = #{user_telephone_number} WHERE
		user_id = #{user_id}
	</update>

	<update id="user_change_address" parameterType="UserDto"> <!-- 개인 주소 변경 -->
		UPDATE user SET user_address = #{user_address} WHERE user_id =
		#{user_id}
	</update>

	<update id="user_change_bank" parameterType="User_BankDto"> <!-- 개인 은행 및 계좌 번호 변경 -->
		UPDATE user_bank SET user_bank = #{user_bank}, user_account_number =
		#{user_account_number} WHERE user_id = #{user_id}
	</update>

	<update id="user_delete_user" parameterType="UserDto"> <!-- 회원 탈퇴 (user-비활성화) -->
		UPDATE user SET user_condition_code = 2 where user_id = #{user_id} AND
		user_password = #{user_password}
	</update>
	
	<update id="user_yes_user" parameterType="UserDto"> <!-- 관리자, 회원 활성화 변경 -->
		UPDATE user SET user_condition_code = 1 where user_id = #{user_id}
	</update>

	<update id="user_no_user" parameterType="UserDto"> <!-- 관리자, 회원 비활성화 변경 -->
		UPDATE user SET user_condition_code = 2 where user_id = #{user_id}
	</update>
	

	<insert id="user_insert_sub" parameterType="UserDto"> <!-- 서브관리자 등록 -->
		INSERT INTO user
		(user_id, user_password, user_name, user_gender,
		user_birth_date,
		user_telephone_number, user_address, user_ip,
		user_role_code)
		VALUES
		(#{user_id}, #{user_password}, #{user_name},
		#{user_gender}, #{user_birth_date}, #{user_telephone_number},
		#{user_address}, #{user_ip}, 2)
	</insert>

	<select id="user_read_admin"
		resultType="com.spring.dto.user.UserDto"
		parameterType="java.util.HashMap"> <!-- 관리자 관리 (등급순) - paging -->
		SELECT * FROM user a LEFT JOIN user_bank b ON a.user_id = b.user_id
		LEFT JOIN user_role c ON a.user_role_code = c.user_role_code LEFT JOIN
		user_condition d ON a.user_condition_code = d.user_condition_code
		WHERE
		c.user_role_code !=3 ORDER BY a.user_role_code ASC LIMIT
		#{pstartno}, #{onpagelist}
	</select>

	<select id="user_read_admin_id_ajax"
		resultType="com.spring.dto.user.UserDto"
		parameterType="java.util.HashMap"> <!-- 관리자 관리 - (아이디순) ajax - paging -->
		SELECT * FROM user a LEFT JOIN user_bank b ON a.user_id = b.user_id
		LEFT
		JOIN user_role c ON a.user_role_code = c.user_role_code lEFT JOIN
		user_condition d ON a.user_condition_code = d.user_condition_code
		WHERE
		c.user_role_code !=3 ORDER BY a.user_id ASC LIMIT #{pstartno},
		#{onpagelist}
	</select>

	<select id="user_read_admin_name_ajax"
		resultType="com.spring.dto.user.UserDto"
		parameterType="java.util.HashMap"> <!-- 관리자 관리 - (이름순) ajax - paging -->
		SELECT * FROM user a LEFT JOIN user_bank b ON a.user_id = b.user_id
		LEFT JOIN user_role c ON a.user_role_code = c.user_role_code LEFT JOIN
		user_condition d ON a.user_condition_code = d.user_condition_code
		WHERE
		c.user_role_code !=3 ORDER BY a.user_name ASC LIMIT #{pstartno},
		#{onpagelist}
	</select>

	<select id="admin_listcnt" resultType="int">
		SELECT count(*) FROM user WHERE user_role_code !=3
	</select>

	<select id="user_read_user"
		resultType="com.spring.dto.user.UserDto"> <!-- 회원 관리 - paging (생성일자순) -->
		SELECT * FROM user a LEFT JOIN user_bank b ON a.user_id = b.user_id
		LEFT JOIN user_role c ON a.user_role_code = c.user_role_code LEFT JOIN
		user_condition d ON a.user_condition_code = d.user_condition_code
		WHERE
		c.user_role_code = 3 ORDER BY a.user_join_date DESC LIMIT
		#{pstartno}, #{onpagelist}
	</select>

	<select id="user_read_user_id_ajax"
		resultType="com.spring.dto.user.UserDto"> <!-- 회원 관리 - (아이디순) ajax - paging -->
		SELECT * FROM user a LEFT JOIN user_bank b ON a.user_id = b.user_id
		LEFT JOIN user_role c ON a.user_role_code = c.user_role_code LEFT JOIN
		user_condition d ON a.user_condition_code = d.user_condition_code
		WHERE
		c.user_role_code = 3 ORDER BY a.user_id ASC LIMIT #{pstartno},
		#{onpagelist}
	</select>

	<select id="user_read_user_name_ajax"
		resultType="com.spring.dto.user.UserDto"> <!-- 회원 관리 - (이름순) ajax - paging -->
		SELECT * FROM user a LEFT JOIN user_bank b ON a.user_id = b.user_id
		LEFT JOIN user_role c ON a.user_role_code = c.user_role_code LEFT JOIN
		user_condition d ON a.user_condition_code = d.user_condition_code
		WHERE
		c.user_role_code = 3 ORDER BY a.user_name ASC LIMIT #{pstartno},
		#{onpagelist}
	</select>

	<select id="user_listcnt" resultType="int"> <!-- 회원 페이징  -->
		SELECT count(*) FROM user WHERE user_role_code = 3
	</select>
	
	<delete id="user_delete_user_out" parameterType="UserDto"> <!-- 회원 및 관리자 삭제 (어드민 전용) -->
		DELETE FROM user WHERE user_id = #{user_id}
	</delete>
		
	<select id="role_check" resultType="int" parameterType="String">
		SELECT user_role_code FROM user WHERE user_id = #{user_id}
	</select>
	
		<select id="condition_check" resultType="int" parameterType="String">
		SELECT user_condition_code FROM user WHERE user_id = #{user_id}
	</select>
	
	<select id="total_check" resultType="java.util.HashMap">
		SELECT a.product_brand, sum(e.order_total_price) product_total
		FROM
		product a LEFT JOIN detail b ON a.product_code = b.detail_product_code
		LEFT JOIN sell c ON b.detail_code = c.sell_detail_code
		LEFT JOIN bid d ON b.detail_code = d.bid_detail_code
		LEFT JOIN ordering e ON d.bid_code = e.order_bid_code WHERE
		e.order_condition_code = 2 and d.bid_condition_code = 2
		GROUP BY a.product_brand;
	</select>
</mapper>